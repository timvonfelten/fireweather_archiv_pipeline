name: Daily Update and FTP Transfer

on:
  schedule:
    - cron: '0 1 * * *'  # Runs every day at 1:00 UTC
  workflow_dispatch:  # Allows manual execution

jobs:
  update-and-transfer:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install rasterio pandas numpy pyarrow geopandas scipy

    - name: Create FTP script
      run: |
        cat << EOF > ftp_operations.py
        from ftplib import FTP
        import os

        def ftp_download(host, user, passwd, remote_path, local_path):
            with FTP(host) as ftp:
                ftp.login(user=user, passwd=passwd)
                with open(local_path, 'wb') as f:
                    ftp.retrbinary(f'RETR {remote_path}', f.write)

        def ftp_upload(host, user, passwd, local_path, remote_path):
            with FTP(host) as ftp:
                ftp.login(user=user, passwd=passwd)
                with open(local_path, 'rb') as f:
                    ftp.storbinary(f'STOR {remote_path}', f)

        if __name__ == "__main__":
            import sys
            operation = sys.argv[1]
            host = sys.argv[2]
            user = sys.argv[3]
            passwd = sys.argv[4]
            local_path = sys.argv[5]
            remote_path = sys.argv[6]
            
            if operation == 'download':
                ftp_download(host, user, passwd, remote_path, local_path)
            elif operation == 'upload':
                ftp_upload(host, user, passwd, local_path, remote_path)
        EOF

    - name: Download Parquet file via FTP
      env:
        FTP_SERVER: ${{ secrets.FTP_SERVER }}
        FTP_USER: ${{ secrets.FTP_USERNAME }}
        FTP_PASS: ${{ secrets.FTP_PASSWORD }}
      run: |
        python ftp_operations.py download $FTP_SERVER $FTP_USER $FTP_PASS fireweather_archive_warnregions.parquet /waldbrandgefahr/data/pipeline/fireweather_archive_warnregions.parquet

    - name: Create Demo Data
      run: python create_demo_data.py

    - name: Run update script
      run: python add_data_to_parquet.py

    - name: Upload updated file via FTP
      env:
        FTP_SERVER: ${{ secrets.FTP_SERVER }}
        FTP_USER: ${{ secrets.FTP_USERNAME }}
        FTP_PASS: ${{ secrets.FTP_PASSWORD }}
      run: |
        python ftp_operations.py upload $FTP_SERVER $FTP_USER $FTP_PASS fireweather_archive_warnregions.parquet /waldbrandgefahr/data/pipeline/fireweather_archive_warnregions.parquet